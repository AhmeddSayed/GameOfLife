/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package field;

import Generations.Cell;
import Generations.CellObserver;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.BorderFactory;

/**
 *
 * @author Ahmed
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainJFrame
     */
    private volatile Cell[][] cells = new Cell[50][50];
    private CellObserver cellObserver;
    ExecutorService es = Executors.newFixedThreadPool(2);

    public MainJFrame() {
        init();
    }

    private void init() {
        initComponents();
        this.setTitle("GameOfLife");
        gamePanel.setLayout(new GridLayout(50, 50, 1, 1));
        generateCells();

        // calling cellObserver
        cellObserver = new CellObserver(cells, gamePanel);
        es.execute(cellObserver);
        gamePanel.setVisible(true);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toggleGameButton = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        gamePanel = new field.GameJPanel();
        restartButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        toggleGameButton.setText("Start/Pause");
        toggleGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleGameButtonActionPerformed(evt);
            }
        });

        restartButton.setText("Restart");
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(toggleGameButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 220, Short.MAX_VALUE)
                                .addComponent(restartButton)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toggleGameButton)
                    .addComponent(restartButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void toggleGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleGameButtonActionPerformed
        this.gamePanel.toggleGameOn();
    }//GEN-LAST:event_toggleGameButtonActionPerformed

    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        // TODO add your handling code here:
        this.cellObserver.setStopped(true);
        for (Component x : this.gamePanel.getComponents()) {
            if (x.getClass() == Cell.class) {
                gamePanel.remove(x);
            }
        }
        repaint();
        generateCells();
        this.gamePanel.setVisible(true);
        Dimension size = this.getSize();
        this.setMinimumSize(size);
        pack();

        cellObserver.setStopped(false);
        es.execute(cellObserver);

    }//GEN-LAST:event_restartButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private field.GameJPanel gamePanel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton restartButton;
    private javax.swing.JToggleButton toggleGameButton;
    // End of variables declaration//GEN-END:variables

    private void generateCells() {
        Random random = new Random();
        // generating cells with randomized states
        for (int i = 0; i < cells.length; i++) {
            for (int j = 0; j < cells.length; j++) {
                boolean isAlive = false;
                if (random.nextInt() % 10 == 0) {
                    isAlive = true;
                }
                cells[i][j] = new Cell(isAlive, "Cell" + i + "-" + j);
                cells[i][j].setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY, 1));
                gamePanel.add(cells[i][j], i, j);
            }
        }
    }
}
